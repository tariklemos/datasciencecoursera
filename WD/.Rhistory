hospName <- dt[dt[,3] == min(dt[,3]), 1]
hospName <- hospName[order(hospName)[1]]
hospName
}
best("SC", "heart attack")
best("NY", "pneumonia")
submit()
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
debugSource('~/Coursera/datasciencecoursera/WD/best.R')
best("TX", "heart failure")
dt[dt[,3] == min(dt[,3]), 1]
dt <- dt[ok,]
dt
min(dt[,3])
best <- function (state, outcome) {
dt <- read.csv("outcome-of-care-measures.csv", colClasses="character")
if(length(dt[dt[, "State"] == state,"State"]) == 0) stop("invalid state")
if(!(outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia")) stop("invalid outcome")
if(outcome == "heart attack") {
dt[,11] <- as.numeric(dt[,11])
dt <- dt[dt[, "State"] == state, c(2, 7, 11)]
} else if (outcome == "heart failure") {
dt[,17] <- as.numeric(dt[,17])
dt <- dt[dt[, "State"] == state, c(2, 7, 17)]
} else {
dt[,23] <- as.numeric(dt[,23])
dt <- dt[dt[, "State"] == state, c(2, 7, 23)]
}
ok <- complete.cases(dt[,3])
dt <- dt[ok,]
hospName <- dt[dt[,3] == min(dt[,3]), 1]
hospName <- hospName[order(hospName)[1]]
hospName
}
best("TX", "heart failure")
best("MD", "pneumonia")
submit()
submit()
rankhospital <- function (state = "TX", outcome = "heart attack", num = "best") {
dt <- read.csv("outcome-of-care-measures.csv", colClasses="character")
if(length(dt[dt[, "State"] == state,"State"]) == 0) stop("invalid state")
if(!(outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia")) stop("invalid outcome")
if(outcome == "heart attack") {
dt[,11] <- as.numeric(dt[,11])
dt <- dt[dt[, "State"] == state, c(2, 7, 11)]
} else if (outcome == "heart failure") {
dt[,17] <- as.numeric(dt[,17])
dt <- dt[dt[, "State"] == state, c(2, 7, 17)]
} else {
dt[,23] <- as.numeric(dt[,23])
dt <- dt[dt[, "State"] == state, c(2, 7, 23)]
}
ok <- complete.cases(dt[,3])
dt <- dt[ok,]
hospName <- dt[order(dt[,3], ascending = FALSE),]
hospName <- hospName[order(hospName)[1]]
hospName
}
debugSource('~/Coursera/datasciencecoursera/WD/rankhospital.R')
rankhospital()
dt
dt[order(dt[,3], ascending = FALSE),]
order(dt[,3], ascending = FALSE)
order(dt[,3])
rankhospital()
debugSource('~/Coursera/datasciencecoursera/WD/rankhospital.R')
rankhospital()
dt[order(dt[,3], decreasing = TRUE),]
dt[order(dt[,3], decreasing = TRUE),]
source('~/Coursera/datasciencecoursera/WD/rankhospital.R')
rankhospital()
rankhospital()
dt
order(c(-dt[,3], dt[,1]))
hospName
debugSource('~/Coursera/datasciencecoursera/WD/rankhospital.R')
rankhospital
rankhospital()
hospName
dt
length(dt)
dim(dt)
dim(dt[order(c(-dt[,3], dt[,1])),])
dt[order(c(-dt[,3], dt[,1])),]
dt[order(-dt[,3]),]
dim(dt[order(-dt[,3]),])
dim(dt[order(-dt[,3], dt[,1]),])
source('~/Coursera/datasciencecoursera/WD/rankhospital.R')
rankhospital()
source('~/Coursera/datasciencecoursera/WD/rankhospital.R')
rankhospital()
rankhospital("TX", "heart failure", 4)
source('~/Coursera/datasciencecoursera/WD/rankhospital.R')
source('~/Coursera/datasciencecoursera/WD/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
dt <- read.csv("outcome-of-care-measures.csv", colClasses="character")
dt[,11] <- as.numeric(dt[,11])
dt <- dt[, c(2, 7, 11)]
dt
split(dt, dt[,7])
dt[,7]
dt[,2]
split(dt, dt[,2])
dt <- read.csv("outcome-of-care-measures.csv", colClasses="character")
dt[,11] <- as.numeric(dt[,11])
dt <- dt[, c(2, 7, 11)]
ok <- complete.cases(dt[,3])
dt <- dt[ok,]
dt
splitted <- split(dt, dt[,2])
dt
spplitted
splitted
summary(splitted)
splitted[1]
length(splitted)
orderOutcome <- function (x) {
x <- x[order(x[,3], x[,1]),1]
}
lapply(splitted, orderOutcome)
splitted
debugSource('~/Coursera/datasciencecoursera/WD/rankall.R')
rankall("heart attack", 20)
debugSource('~/Coursera/datasciencecoursera/WD/rankall.R')
rankall("heart attack", 20)
rankall("heart attack", 20)
splitted
splitted
lapply(splitted, orderOutcome)
orderOutcome <- function (x) {
x <- x[order(x[,3], x[,1]),]
}
splitted
lapply(splitted, orderOutcome)
splittedAndOrdered <- lapply(splitted, orderOutcome)
splitted
splittedAndOrdered
orderOutcome <- function (x, num) {
x <- x[order(x[,3], x[,1]),]
if(num == "best") {
return(x[1, 1:2])
} else if(num == "worst") {
return(x[length(x), 1:2])
} else {
return(x[num, 1:2])
}
}
dtf <- lapply(splitted, orderOutcome, num)
dtf <- lapply(splitted, orderOutcome, num=num)
dtf <- lapply(splitted, orderOutcome, num="best")
dtf
dtf <- sapply(splitted, orderOutcome, num="best")
dtf
dtf <- lapply(splitted, orderOutcome, num="best")
dtf
data.frame(dtf)
dtf
getName <- function(x) {
return(x[1,2])
}
getState <- function(x) {
return(x[1,2])
}
dtf <- lapply(splitted, orderOutcome, num="best")
hospnames <- sapply(dtf, getNames)
hospnames <- sapply(dtf, getName)
hospnames
statenames <- sapply(dtf, getState)
statenames
getName <- function(x) {
return(x[1,1])
}
hospnames <- sapply(dtf, getName)
hospnames
dtf(hospital = hospnames, state = statenames)
dtf <- lapply(splitted, orderOutcome, num="best")
dtf <- data.frame(hospital = hospnames, state = statenames)
dtf
source('~/Coursera/datasciencecoursera/WD/rankall.R')
head(rankall("heart attack", 20), 10)
dt <- read.csv("outcome-of-care-measures.csv", colClasses="character")
dt[,11] <- as.numeric(dt[,11])
dt <- dt[, c(2, 7, 11)]
orderOutcome <- function (x, num) {
x <- x[order(x[,3], x[,1]),]
if(num == "best") {
return(x[1, 1:2])
} else if(num == "worst") {
return(x[length(x), 1:2])
} else {
return(x[num, 1:2])
}
}
getName <- function(x) {
return(x[1,1])
}
getState <- function(x) {
return(x[1,2])
}
source('~/Coursera/datasciencecoursera/WD/rankall.R')
head(rankall("heart attack", 20), 10)
dtf <- lapply(splitted, orderOutcome, num=num)
dtf <- lapply(splitted, orderOutcome, num="best")
dtf
source('~/Coursera/datasciencecoursera/WD/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/Coursera/datasciencecoursera/WD/rankall.R')
head(rankall("heart attack", 20), 10)
submit()
submit()
rankall("pneumonia", "worst")
source('~/Coursera/datasciencecoursera/WD/rankall.R')
rankall("pneumonia", "worst")
source('~/Coursera/datasciencecoursera/WD/rankall.R')
rankall("pneumonia", "worst")
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure"), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 10)
source('~/Coursera/datasciencecoursera/WD/rankall.R')
tail(rankall("pneumonia", "worst"), 10)
dtf
dtf$params
param(dtf)
objects(dtf)
objects(dtf$AK)
names(dtf$AK)
source('~/Coursera/datasciencecoursera/WD/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
dtf
splitted$WI
tail(rankall("heart attack", "worst"), 3)
splitted$WI
dtf
debugSource('~/Coursera/datasciencecoursera/WD/rankall.R')
tail(rankall("heart attack", "worst"), 3)
splitted
tail(rankall("pneumonia", "worst"), 3)
splitted
dtf
tail(rankall("pneumonia", "worst"), 3)
source('~/Coursera/datasciencecoursera/WD/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
submit()
submit()
library(swirl)
swirld()
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
my_na <- my_data[is.na(my_data)]
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
T == T
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE. FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
x(5 == 6, !FALSE)
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My First function!')
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4, 5, 10))
submit()
View(submit)
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.5, 3.6, 7.9, 8.8))
info()
evaluate <- function(func, dat){
func(dat)
}
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c("a", "b"))
submit()
mad_libs(place = "hotel", adjective = "good looking", noun = "video")
submit()
"I" %p% "love" %p% "R!"
rm(list=ls())
library(swirl)
swirl()
head(flags, 6)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length())
sapply(unique_vals, length
)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tappply(flags$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinim(1, size=100, prob=0.7)
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(rpois(5, 10))
my_pois <- replicate(rpois(5, 10), 100)
my_pois <- replicate(rpois(5, 10), length=100)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-91")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y, %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2
)
data(mtcars)
?boxplot
boxplot(mpg~cylm data = mtcars)
boxplot(mpg~cyl, data = mtcars)
hist(mtcars$mpg)
